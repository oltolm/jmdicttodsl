/*
 * Copyright (C) 2011-2014 Oleg Tolmatcev <oleg.tolmatcev@yahoo.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jmdicttodsl;

import static java.lang.String.format;
import java.io.*;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author Oleg Tolmatcev
 */
public class JmdictToDsl extends javax.swing.JFrame {
    private static final Logger LOGGER = Logger.getLogger(JmdictToDsl.class.getName());

    private volatile boolean isBusy = false;

    boolean isBusy () {
        return isBusy;
    }

    void setIsBusy(boolean b) {
        isBusy = false;
    }

    /**
     * Creates new form JMdictToDsl
     */
    public JmdictToDsl() {
        initComponents();
        setVisible(true);
        jmdictPanel.setTransferHandler(new JmdictTransferhandler(t -> !isBusy,
                this::convertJmdict));
        warodaiPanel.setTransferHandler(new JmdictTransferhandler(t -> !isBusy,
                this::convertWarodai));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jmdictPanel = new javax.swing.JPanel();
        outputLabel = new javax.swing.JLabel();
        langComboBox = new javax.swing.JComboBox();
        languageLabel = new javax.swing.JLabel();
        label = new javax.swing.JLabel();
        outputComboBox = new javax.swing.JComboBox();
        warodaiPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JMDict to DSL");

        panel.setPreferredSize(new java.awt.Dimension(600, 400));

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setRows(5);
        scrollPane.setViewportView(textArea);

        outputLabel.setText("Output:");

        langComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "English", "French", "German", "Russian" }));

        languageLabel.setText("Language:");

        label.setText("Drop the file \"JMDict\" or \"JMDict.gz\" here.");

        outputComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DSL", "EDICT" }));

        javax.swing.GroupLayout jmdictPanelLayout = new javax.swing.GroupLayout(jmdictPanel);
        jmdictPanel.setLayout(jmdictPanelLayout);
        jmdictPanelLayout.setHorizontalGroup(
            jmdictPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jmdictPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jmdictPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jmdictPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(label)
                        .addGroup(jmdictPanelLayout.createSequentialGroup()
                            .addGroup(jmdictPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(languageLabel)
                                .addComponent(outputLabel))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jmdictPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(langComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(outputComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jmdictPanelLayout.setVerticalGroup(
            jmdictPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 106, Short.MAX_VALUE)
            .addGroup(jmdictPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jmdictPanelLayout.createSequentialGroup()
                    .addGap(4, 4, 4)
                    .addComponent(label)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jmdictPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(languageLabel)
                        .addComponent(langComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(26, 26, 26)
                    .addGroup(jmdictPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(outputComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(outputLabel))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("JMDict", jmdictPanel);

        jLabel1.setText("Drop file \"ewarodai.txt\" here.");

        javax.swing.GroupLayout warodaiPanelLayout = new javax.swing.GroupLayout(warodaiPanel);
        warodaiPanel.setLayout(warodaiPanelLayout);
        warodaiPanelLayout.setHorizontalGroup(
            warodaiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(warodaiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(423, Short.MAX_VALUE))
        );
        warodaiPanelLayout.setVerticalGroup(
            warodaiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(warodaiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(81, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Warodai", warodaiPanel);

        jTabbedPane1.setSelectedIndex(1);

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.setProperty("entityExpansionLimit", "1000000");
        try (InputStream is = JmdictToDsl.class.getResourceAsStream("/logging.properties")) {
            LogManager.getLogManager().readConfiguration(is);
        } catch (IOException | SecurityException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
            System.exit(1);
        }
        SwingUtilities.invokeLater(() -> {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                new JmdictToDsl();
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                    UnsupportedLookAndFeelException ex) {
                LOGGER.log(Level.SEVERE, null, ex);
            }
        });
    }

    void convertJmdict(List<File> files) {
        isBusy = true;
        progressBar.setIndeterminate(true);
        String lang = (String) langComboBox.getSelectedItem();
        String format = (String) outputComboBox.getSelectedItem();
        textArea.append(format("Starting conversion to %s.\n", lang));
        JmdictTask task = new JmdictTask(files.get(0), lang, format, this);
        task.execute();
    }

    void convertWarodai(List<File> files) {
        isBusy = true;
        progressBar.setIndeterminate(true);
        WarodaiTask task = new WarodaiTask(this, files.get(0));
        task.execute();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel jmdictPanel;
    private javax.swing.JLabel label;
    private javax.swing.JComboBox langComboBox;
    private javax.swing.JLabel languageLabel;
    private javax.swing.JComboBox outputComboBox;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JPanel panel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextArea textArea;
    private javax.swing.JPanel warodaiPanel;
    // End of variables declaration//GEN-END:variables

    void finishConversion(File outFile, Date start) {
        isBusy = false;
        progressBar.setIndeterminate(false);
        Date end = new Date();
        textArea.append(format("Created %s in %s ms.%n", outFile.getPath(),
                end.getTime() - start.getTime()));
        JScrollBar scrollBar = scrollPane.getVerticalScrollBar();
        scrollBar.setValue(scrollBar.getMaximum());
    }
}
